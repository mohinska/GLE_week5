'''
Code-based service that allows the user to specify the genre, the year, and the
number of top rated movies they want to receive and returns to them a list of
matching movies ordered by rating in descending order.
'''

def read_file(pathname: str, year: int=0):
    '''
    Reads data from a specified file and filters it by release year.

    :param pathname: str, The path to the file containing movie data.
    :param year: int, The minimum release year of movies to be included in the output. 
    Only movies released on or after this year are returned. Default is 0.
    :return: list of list, A list where each element is a list representing one movie.

    >>> read_file('films.csv', 2014)[:2]
    [['1', 'Guardians of the Galaxy', 'Action,Adventure,Sci-Fi', \
'A group of intergalactic criminals are forced to work together to stop \
a fanatical warrior from taking control of the universe.', 'James Gunn', \
'Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana', '2014', '121', \
'8.1', '757074', '333.13', '76.0'], \
['3', 'Split', 'Horror,Thriller', 'Three girls are kidnapped by a man with \
a diagnosed 23 distinct personalities. They must try to escape before the \
apparent emergence of a frightful new 24th.', 'M. Night Shyamalan', \
'James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula', '2016', '117', \
'7.3', '157606', '138.12', '62.0']]
    '''
    output = []
    with open(pathname, 'r', encoding='utf-8') as file:
        file.readline()
        for line in file:
            line = line.strip().split(';')
            if int(line[6]) >= year:
                output.append(line)
    return output


def get_sorting_key(movie: tuple[str, float]):
    '''
    Returns a sorting key for a movie based on its rating and title.
    '''
    return (-movie[1], movie[0])


def top_n(data: list, genre: str='', n: int=0):
    '''
    Selects and ranks the top movies based on a combined rating and actor rating.

    :param data: list, A list of lists where each internal list represents a
    movie (output from `read_file`).
    :param genre: str, A comma-separated list of genres to filter movies by.
    Defaults to an empty string, which selects movies of any genre.
    :param n: int, The number of top movies to return. If 0, returns all movies
    that match the criteria. Default is 0.
    :return: list of tuple, A list of tuples where each tuple contains the
    movie title and the combined rating. The tuples are sorted in descending
    order by combined rating.

    >>> top_n(read_file('films.csv', 2014), genre='Action', n=5)
    [('Dangal', 8.8), \
('Bahubali: The Beginning', 8.3), \
('Guardians of the Galaxy', 8.1), \
('Mad Max: Fury Road', 8.1), \
('Star Wars: Episode VII - The Force Awakens', 8.1)]
    '''
    filtered_movies = []
    filter_genre = True
    if genre == '':
        filter_genre = False
    for movie in data:
        movie_genres = movie[2].split(',')
        if (filter_genre and genre in movie_genres) or not filter_genre:
            filtered_movies.append((movie[1], float(movie[8])))
    filtered_movies = sorted(filtered_movies, key=get_sorting_key)
    if n == 0:
        return filtered_movies
    return filtered_movies[:n]


def write_file(top: list, file_name: str):
    '''
    This function accepts a list of tuples generated by `top_n` and writes each
    tuple's content to a new line in a specified file. Each line includes the
    movie title and its rating, separated by a comma.

    :param top: list, A list of tuples containing movie titles and their respective ratings.
    :param file_name: str, The name of the file where the movie data should be saved.
    :return: None
    '''
    with open(file_name, 'w', encoding='utf-8') as file:
        for movie in top:
            file.write(f'{movie[0]}, {movie[1]}\n')


# data = top_n(read_file('films.csv'))
# print(data)
# write_file(data, 'out.txt')

if __name__ == '__main__':
    import doctest
    print(doctest.testmod())
